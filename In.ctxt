#BlueJ class context
comment0.params=
comment0.target=In()
comment0.text=\n\ Initializes\ an\ input\ stream\ from\ standard\ input.\n
comment1.params=socket
comment1.target=In(java.net.Socket)
comment1.text=\n\ Initializes\ an\ input\ stream\ from\ a\ socket.\n\n\ @param\ \ socket\ the\ socket\n\ @throws\ IllegalArgumentException\ if\ cannot\ open\ {@code\ socket}\n\ @throws\ NullPointerException\ if\ {@code\ socket}\ is\ {@code\ null}\n
comment10.params=
comment10.target=java.lang.String\ readLine()
comment10.text=\n\ Reads\ and\ returns\ the\ next\ line\ in\ this\ input\ stream.\n\n\ @return\ the\ next\ line\ in\ this\ input\ stream;\ <tt>null</tt>\ if\ no\ such\ line\n
comment11.params=
comment11.target=char\ readChar()
comment11.text=\n\ Reads\ and\ returns\ the\ next\ character\ in\ this\ input\ stream.\n\n\ @return\ the\ next\ character\ in\ this\ input\ stream\n
comment12.params=
comment12.target=java.lang.String\ readAll()
comment12.text=\n\ Reads\ and\ returns\ the\ remainder\ of\ this\ input\ stream,\ as\ a\ string.\n\n\ @return\ the\ remainder\ of\ this\ input\ stream,\ as\ a\ string\n
comment13.params=
comment13.target=java.lang.String\ readString()
comment13.text=\n\ Reads\ the\ next\ token\ from\ this\ input\ stream\ and\ returns\ it\ as\ a\ <tt>String</tt>.\n\n\ @return\ the\ next\ <tt>String</tt>\ in\ this\ input\ stream\n
comment14.params=
comment14.target=int\ readInt()
comment14.text=\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ <tt>int</tt>,\n\ and\ returns\ the\ <tt>int</tt>.\n\n\ @return\ the\ next\ <tt>int</tt>\ in\ this\ input\ stream\n
comment15.params=
comment15.target=double\ readDouble()
comment15.text=\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ <tt>double</tt>,\n\ and\ returns\ the\ <tt>double</tt>.\n\n\ @return\ the\ next\ <tt>double</tt>\ in\ this\ input\ stream\n
comment16.params=
comment16.target=float\ readFloat()
comment16.text=\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ <tt>float</tt>,\n\ and\ returns\ the\ <tt>float</tt>.\n\n\ @return\ the\ next\ <tt>float</tt>\ in\ this\ input\ stream\n
comment17.params=
comment17.target=long\ readLong()
comment17.text=\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ <tt>long</tt>,\n\ and\ returns\ the\ <tt>long</tt>.\n\n\ @return\ the\ next\ <tt>long</tt>\ in\ this\ input\ stream\n
comment18.params=
comment18.target=short\ readShort()
comment18.text=\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ <tt>short</tt>,\n\ and\ returns\ the\ <tt>short</tt>.\n\n\ @return\ the\ next\ <tt>short</tt>\ in\ this\ input\ stream\n
comment19.params=
comment19.target=byte\ readByte()
comment19.text=\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ <tt>byte</tt>,\n\ and\ returns\ the\ <tt>byte</tt>.\n\ <p>\n\ To\ read\ binary\ data,\ use\ {@link\ BinaryIn}.\n\n\ @return\ the\ next\ <tt>byte</tt>\ in\ this\ input\ stream\n
comment2.params=url
comment2.target=In(java.net.URL)
comment2.text=\n\ Initializes\ an\ input\ stream\ from\ a\ URL.\n\n\ @param\ \ url\ the\ URL\n\ @throws\ IllegalArgumentException\ if\ cannot\ open\ {@code\ url}\n\ @throws\ NullPointerException\ if\ {@code\ url}\ is\ {@code\ null}\n
comment20.params=
comment20.target=boolean\ readBoolean()
comment20.text=\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ <tt>boolean</tt>\n\ (interpreting\ either\ <tt>"true"</tt>\ or\ <tt>"1"</tt>\ as\ <tt>true</tt>,\n\ and\ either\ <tt>"false"</tt>\ or\ <tt>"0"</tt>\ as\ <tt>false</tt>).\n\n\ @return\ the\ next\ <tt>boolean</tt>\ in\ this\ input\ stream\n
comment21.params=
comment21.target=java.lang.String[]\ readAllStrings()
comment21.text=\n\ Reads\ all\ remaining\ tokens\ from\ this\ input\ stream\ and\ returns\ them\ as\n\ an\ array\ of\ strings.\n\n\ @return\ all\ remaining\ tokens\ in\ this\ input\ stream,\ as\ an\ array\ of\ strings\n
comment22.params=
comment22.target=java.lang.String[]\ readAllLines()
comment22.text=\n\ Reads\ all\ remaining\ lines\ from\ this\ input\ stream\ and\ returns\ them\ as\n\ an\ array\ of\ strings.\n\n\ @return\ all\ remaining\ lines\ in\ this\ input\ stream,\ as\ an\ array\ of\ strings\n
comment23.params=
comment23.target=int[]\ readAllInts()
comment23.text=\n\ Reads\ all\ remaining\ tokens\ from\ this\ input\ stream,\ parses\ them\ as\ integers,\n\ and\ returns\ them\ as\ an\ array\ of\ integers.\n\n\ @return\ all\ remaining\ lines\ in\ this\ input\ stream,\ as\ an\ array\ of\ integers\n
comment24.params=
comment24.target=double[]\ readAllDoubles()
comment24.text=\n\ Reads\ all\ remaining\ tokens\ from\ this\ input\ stream,\ parses\ them\ as\ doubles,\n\ and\ returns\ them\ as\ an\ array\ of\ doubles.\n\n\ @return\ all\ remaining\ lines\ in\ this\ input\ stream,\ as\ an\ array\ of\ doubles\n
comment25.params=
comment25.target=void\ close()
comment25.text=\n\ Closes\ this\ input\ stream.\n
comment26.params=filename
comment26.target=int[]\ readInts(java.lang.String)
comment26.text=\n\ Reads\ all\ integers\ from\ a\ file\ and\ returns\ them\ as\n\ an\ array\ of\ integers.\n\n\ @param\ \ \ \ \ \ filename\ the\ name\ of\ the\ file\n\ @return\ \ \ \ \ the\ integers\ in\ the\ file\n\ @deprecated\ Replaced\ by\ <tt>new\ In(filename)</tt>.{@link\ \#readAllInts()}.\n
comment27.params=filename
comment27.target=double[]\ readDoubles(java.lang.String)
comment27.text=\n\ Reads\ all\ doubles\ from\ a\ file\ and\ returns\ them\ as\n\ an\ array\ of\ doubles.\n\n\ @param\ \ \ \ \ \ filename\ the\ name\ of\ the\ file\n\ @return\ \ \ \ \ the\ doubles\ in\ the\ file\n\ @deprecated\ Replaced\ by\ <tt>new\ In(filename)</tt>.{@link\ \#readAllDoubles()}.\n
comment28.params=filename
comment28.target=java.lang.String[]\ readStrings(java.lang.String)
comment28.text=\n\ Reads\ all\ strings\ from\ a\ file\ and\ returns\ them\ as\n\ an\ array\ of\ strings.\n\n\ @param\ \ \ \ \ \ filename\ the\ name\ of\ the\ file\n\ @return\ \ \ \ \ the\ strings\ in\ the\ file\n\ @deprecated\ Replaced\ by\ <tt>new\ In(filename)</tt>.{@link\ \#readAllStrings()}.\n
comment29.params=
comment29.target=int[]\ readInts()
comment29.text=\n\ Reads\ all\ integers\ from\ standard\ input\ and\ returns\ them\n\ an\ array\ of\ integers.\n\n\ @return\ \ \ \ \ the\ integers\ on\ standard\ input\n\ @deprecated\ Replaced\ by\ {@link\ StdIn\#readAllInts()}.\n
comment3.params=file
comment3.target=In(java.io.File)
comment3.text=\n\ Initializes\ an\ input\ stream\ from\ a\ file.\n\n\ @param\ \ file\ the\ file\n\ @throws\ IllegalArgumentException\ if\ cannot\ open\ {@code\ file}\n\ @throws\ NullPointerException\ if\ {@code\ file}\ is\ {@code\ null}\n
comment30.params=
comment30.target=double[]\ readDoubles()
comment30.text=\n\ Reads\ all\ doubles\ from\ standard\ input\ and\ returns\ them\ as\n\ an\ array\ of\ doubles.\n\n\ @return\ \ \ \ \ the\ doubles\ on\ standard\ input\n\ @deprecated\ Replaced\ by\ {@link\ StdIn\#readAllDoubles()}.\n
comment31.params=
comment31.target=java.lang.String[]\ readStrings()
comment31.text=\n\ Reads\ all\ strings\ from\ standard\ input\ and\ returns\ them\ as\n\ \ an\ array\ of\ strings.\n\n\ @return\ \ \ \ \ the\ strings\ on\ standard\ input\n\ @deprecated\ Replaced\ by\ {@link\ StdIn\#readAllStrings()}.\n
comment32.params=args
comment32.target=void\ main(java.lang.String[])
comment32.text=\n\ Unit\ tests\ the\ <tt>In</tt>\ data\ type.\n
comment4.params=name
comment4.target=In(java.lang.String)
comment4.text=\n\ Initializes\ an\ input\ stream\ from\ a\ filename\ or\ web\ page\ name.\n\n\ @param\ \ name\ the\ filename\ or\ web\ page\ name\n\ @throws\ IllegalArgumentException\ if\ cannot\ open\ {@code\ name}\ as\n\ \ \ \ \ \ \ \ \ a\ file\ or\ URL\n\ @throws\ NullPointerException\ if\ {@code\ name}\ is\ {@code\ null}\n
comment5.params=scanner
comment5.target=In(java.util.Scanner)
comment5.text=\n\ Initializes\ an\ input\ stream\ from\ a\ given\ {@link\ Scanner}\ source;\ use\ with\ \n\ <tt>new\ Scanner(String)</tt>\ to\ read\ from\ a\ string.\n\ <p>\n\ Note\ that\ this\ does\ not\ create\ a\ defensive\ copy,\ so\ the\n\ scanner\ will\ be\ mutated\ as\ you\ read\ on.\ \n\n\ @param\ \ scanner\ the\ scanner\n\ @throws\ NullPointerException\ if\ {@code\ scanner}\ is\ {@code\ null}\n
comment6.params=
comment6.target=boolean\ exists()
comment6.text=\n\ Returns\ true\ if\ this\ input\ stream\ exists.\n\n\ @return\ <tt>true</tt>\ if\ this\ input\ stream\ exists;\ <tt>false</tt>\ otherwise\n
comment7.params=
comment7.target=boolean\ isEmpty()
comment7.text=\n\ Returns\ true\ if\ input\ stream\ is\ empty\ (except\ possibly\ whitespace).\n\ Use\ this\ to\ know\ whether\ the\ next\ call\ to\ {@link\ \#readString()},\ \n\ {@link\ \#readDouble()},\ etc\ will\ succeed.\n\n\ @return\ <tt>true</tt>\ if\ this\ input\ stream\ is\ empty\ (except\ possibly\ whitespace);\n\ \ \ \ \ \ \ \ \ <tt>false</tt>\ otherwise\n
comment8.params=
comment8.target=boolean\ hasNextLine()
comment8.text=\ \n\ Returns\ true\ if\ this\ input\ stream\ has\ a\ next\ line.\n\ Use\ this\ method\ to\ know\ whether\ the\n\ next\ call\ to\ {@link\ \#readLine()}\ will\ succeed.\n\ This\ method\ is\ functionally\ equivalent\ to\ {@link\ \#hasNextChar()}.\n\n\ @return\ <tt>true</tt>\ if\ this\ input\ stream\ is\ empty;\n\ \ \ \ \ \ \ \ \ <tt>false</tt>\ otherwise\n
comment9.params=
comment9.target=boolean\ hasNextChar()
comment9.text=\n\ Returns\ true\ if\ this\ input\ stream\ has\ more\ inputy\ (including\ whitespace).\n\ Use\ this\ method\ to\ know\ whether\ the\ next\ call\ to\ {@link\ \#readChar()}\ will\ succeed.\n\ This\ method\ is\ functionally\ equivalent\ to\ {@link\ \#hasNextLine()}.\n\ \n\ @return\ <tt>true</tt>\ if\ this\ input\ stream\ has\ more\ input\ (including\ whitespace);\n\ \ \ \ \ \ \ \ \ <tt>false</tt>\ otherwise\ \ \ \n
numComments=33
